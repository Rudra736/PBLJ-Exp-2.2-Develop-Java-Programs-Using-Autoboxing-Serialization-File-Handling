//Sum of Integers Using Autoboxing and Unboxing
public class AutoboxingExample {
    public static void main(String[] args) {
        int a = 10;
        int b = 20;
        Integer num1 = a;
        Integer num2 = b;
        int sum = num1 + num2;
        System.out.println("Sum = " + sum);
    }
}

//Serialization and Deserialization of a Student Object

import java.io.*;

class Student implements Serializable {
    int id;
    String name;
    transient double marks;

    Student(int id, String name, double marks) {
        this.id = id;
        this.name = name;
        this.marks = marks;
    }

    void display() {
        System.out.println("ID: " + id + ", Name: " + name + ", Marks: " + marks);
    }
}

public class SerializationExample {
    public static void main(String[] args) {
        Student s1 = new Student(101, "Rudra", 89.5);
        try (ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream("student.ser"))) {
            out.writeObject(s1);
            System.out.println("Object Serialized Successfully!");
        } catch (Exception e) {
            e.printStackTrace();
        }
        try (ObjectInputStream in = new ObjectInputStream(new FileInputStream("student.ser"))) {
            Student s2 = (Student) in.readObject();
            System.out.println("Object Deserialized Successfully!");
            s2.display();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
//Menu-Based Employee Management System Using File Handling
import java.io.*;
import java.util.*;

class Employee implements Serializable {
    int id;
    String name;
    double salary;

    Employee(int id, String name, double salary) {
        this.id = id;
        this.name = name;
        this.salary = salary;
    }

    void display() {
        System.out.println("ID: " + id + " | Name: " + name + " | Salary: " + salary);
    }
}

public class EmployeeManagement {
    static final String FILE_NAME = "employees.dat";

    public static void main(String[] args) throws Exception {
        Scanner sc = new Scanner(System.in);
        int choice;

        do {
            System.out.println("\n--- Employee Management System ---");
            System.out.println("1. Add Employee");
            System.out.println("2. View All Employees");
            System.out.println("3. Search Employee by ID");
            System.out.println("4. Exit");
            System.out.print("Enter your choice: ");
            choice = sc.nextInt();

            switch (choice) {
                case 1 -> addEmployee(sc);
                case 2 -> viewEmployees();
                case 3 -> searchEmployee(sc);
                case 4 -> System.out.println("Exiting...");
                default -> System.out.println("Invalid Choice!");
            }
        } while (choice != 4);
    }

    static void addEmployee(Scanner sc) throws Exception {
        System.out.print("Enter ID: ");
        int id = sc.nextInt();
        sc.nextLine();
        System.out.print("Enter Name: ");
        String name = sc.nextLine();
        System.out.print("Enter Salary: ");
        double salary = sc.nextDouble();

        Employee emp = new Employee(id, name, salary);

        List<Employee> list = getEmployees();
        list.add(emp);

        try (ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(FILE_NAME))) {
            out.writeObject(list);
            System.out.println("Employee Added Successfully!");
        }
    }

    @SuppressWarnings("unchecked")
    static List<Employee> getEmployees() {
        File file = new File(FILE_NAME);
        if (!file.exists()) return new ArrayList<>();

        try (ObjectInputStream in = new ObjectInputStream(new FileInputStream(FILE_NAME))) {
            return (List<Employee>) in.readObject();
        } catch (Exception e) {
            return new ArrayList<>();
        }
    }

    static void viewEmployees() {
        List<Employee> list = getEmployees();
        if (list.isEmpty()) {
            System.out.println("No Employees Found!");
        } else {
            System.out.println("\n--- Employee List ---");
            list.forEach(Employee::display);
        }
    }

    static void searchEmployee(Scanner sc) {
        System.out.print("Enter Employee ID to Search: ");
        int id = sc.nextInt();
        List<Employee> list = getEmployees();

        for (Employee e : list) {
            if (e.id == id) {
                e.display();
                return;
            }
        }
        System.out.println("Employee Not Found!");
    }
}
